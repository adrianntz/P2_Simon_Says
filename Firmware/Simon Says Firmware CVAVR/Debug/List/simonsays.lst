
AVRASM ver. 2.1.30  C:\Users\adyco\OneDrive - Universitatea Politehnica Bucuresti\POLI\ANUL 3 SEM 2\P2\P2_Simon_says\Debug\List\simonsays.asm Wed Jun 15 18:02:28 2022

C:\Users\adyco\OneDrive - Universitatea Politehnica Bucuresti\POLI\ANUL 3 SEM 2\P2\P2_Simon_says\Debug\List\simonsays.asm(1420): warning: Register r3 already defined by the .DEF directive
C:\Users\adyco\OneDrive - Universitatea Politehnica Bucuresti\POLI\ANUL 3 SEM 2\P2\P2_Simon_says\Debug\List\simonsays.asm(1421): warning: Register r4 already defined by the .DEF directive
C:\Users\adyco\OneDrive - Universitatea Politehnica Bucuresti\POLI\ANUL 3 SEM 2\P2\P2_Simon_says\Debug\List\simonsays.asm(1422): warning: Register r5 already defined by the .DEF directive
C:\Users\adyco\OneDrive - Universitatea Politehnica Bucuresti\POLI\ANUL 3 SEM 2\P2\P2_Simon_says\Debug\List\simonsays.asm(1423): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.48b 
                 ;(C) Copyright 1998-2022 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega164A
                 ;Program type           : Application
                 ;Clock frequency        : 20.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega164A
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPMCSR=0x37
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x04FF
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 	.EQU __EEPROM_PAGE_SIZE=0x04
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _level=R3
                 	.DEF _level_msb=R4
                 	.DEF _Sequence_Step_Delay=R5
                 	.DEF _Sequence_Step_Delay_msb=R6
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00003e 0001
00003f 03e8      	.DB  0x1,0x0,0xE8,0x3
                 
                 _0x2000060:
C:\Users\adyco\OneDrive - Universitatea Politehnica Bucuresti\POLI\ANUL 3 SEM 2\P2\P2_Simon_says\Debug\List\simonsays.asm(1472): warning: .cseg .db misalignment - padding zero byte
000040 0001      	.DB  0x1
                 _0x2000000:
000041 4e2d
000042 4e41
000043 4900
000044 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\adyco\OneDrive - Universitatea Politehnica Bucuresti\POLI\ANUL 3 SEM 2\P2\P2_Simon_says\Debug\List\simonsays.asm(1475): warning: .cseg .db misalignment - padding zero byte
000045 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000046 0004      	.DW  0x04
000047 0003      	.DW  0x03
000048 007c      	.DW  __REG_VARS*2
                 
000049 0001      	.DW  0x01
00004a 0390      	.DW  __seed_G100
00004b 0080      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
00004c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004d 94f8      	CLI
00004e 27ee      	CLR  R30
00004f bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000050 e0f1      	LDI  R31,1
000051 bff5      	OUT  MCUCR,R31
000052 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000053 e08d      	LDI  R24,(14-2)+1
000054 e0a2      	LDI  R26,2
000055 27bb      	CLR  R27
                 __CLEAR_REG:
000056 93ed      	ST   X+,R30
000057 958a      	DEC  R24
000058 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000059 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005b e0a0      	LDI  R26,LOW(__SRAM_START)
00005c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00005d 93ed      	ST   X+,R30
00005e 9701      	SBIW R24,1
00005f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000060 e8ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000061 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000062 9185      	LPM  R24,Z+
000063 9195      	LPM  R25,Z+
000064 9700      	SBIW R24,0
000065 f061      	BREQ __GLOBAL_INI_END
000066 91a5      	LPM  R26,Z+
000067 91b5      	LPM  R27,Z+
000068 9005      	LPM  R0,Z+
000069 9015      	LPM  R1,Z+
00006a 01bf      	MOVW R22,R30
00006b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006c 9005      	LPM  R0,Z+
00006d 920d      	ST   X+,R0
00006e 9701      	SBIW R24,1
00006f f7e1      	BRNE __GLOBAL_INI_LOOP
000070 01fb      	MOVW R30,R22
000071 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000072 e0e0      	LDI  R30,__GPIOR0_INIT
000073 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000074 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000075 bfed      	OUT  SPL,R30
000076 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000077 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000078 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000079 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007a 940c 017d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x200
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;void putchar1(char c)
                 ; 0000 0030 {
                 
                 	.CSEG
                 ; 0000 0031 while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
                 ;	c -> R17
                 ; 0000 0032 UDR1=c;
                 ; 0000 0033 }
                 ;void All_LED_Off()
                 ; 0000 003E {
                 _All_LED_Off:
                 ; .FSTART _All_LED_Off
                 ; 0000 003F LED1=0;
00007c 982c      	CBI  0x5,4
                 ; 0000 0040 LED2=0;
00007d 982d      	CBI  0x5,5
                 ; 0000 0041 LED3=0;
00007e 982e      	CBI  0x5,6
                 ; 0000 0042 LED4=0;
00007f 982f      	CBI  0x5,7
                 ; 0000 0043 }
000080 9508      	RET
                 ; .FEND
                 ;void All_LED_On()
                 ; 0000 0046 {
                 _All_LED_On:
                 ; .FSTART _All_LED_On
                 ; 0000 0047 LED1=1;
000081 9a2c      	SBI  0x5,4
                 ; 0000 0048 LED2=1;
000082 9a2d      	SBI  0x5,5
                 ; 0000 0049 LED3=1;
000083 9a2e      	SBI  0x5,6
                 ; 0000 004A LED4=1;
000084 9a2f      	SBI  0x5,7
                 ; 0000 004B }
000085 9508      	RET
                 ; .FEND
                 ;void generate_Current_Level()
                 ; 0000 004E {
                 _generate_Current_Level:
                 ; .FSTART _generate_Current_Level
                 ; 0000 004F 
                 ; 0000 0050 unsigned int i;
                 ; 0000 0051 for ( i = 0; i < MAX_LEVEL; i++)
000086 d17b      	RCALL SUBOPT_0x0
                 ;	i -> R16,R17
                 _0x17:
                +
000087 3604     +CPI R16 , LOW ( 100 )
000088 e0e0     +LDI R30 , HIGH ( 100 )
000089 071e     +CPC R17 , R30
                 	__CPWRN 16,17,100
00008a f480      	BRSH _0x18
                 ; 0000 0052 Current_Level[i] = rand() % 4;
00008b d17b      	RCALL SUBOPT_0x1
00008c 0fea      	ADD  R30,R26
00008d 1ffb      	ADC  R31,R27
00008e 93ff      	PUSH R31
00008f 93ef      	PUSH R30
000090 d155      	RCALL _rand
000091 e0a3      	LDI  R26,LOW(3)
000092 e0b0      	LDI  R27,HIGH(3)
000093 d1de      	RCALL __MANDW12
000094 91af      	POP  R26
000095 91bf      	POP  R27
000096 93ed      	ST   X+,R30
000097 93fc      	ST   X,R31
                +
000098 5f0f     +SUBI R16 , LOW ( - 1 )
000099 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00009a cfec      	RJMP _0x17
                 _0x18:
                 ; 0000 0055 }
00009b c057      	RJMP _0x2080002
                 ; .FEND
                 ;void show_Current_Level()
                 ; 0000 0058 {
                 _show_Current_Level:
                 ; .FSTART _show_Current_Level
                 ; 0000 0059 unsigned int i;
                 ; 0000 005A All_LED_Off();
00009c 931a      	ST   -Y,R17
00009d 930a      	ST   -Y,R16
                 ;	i -> R16,R17
00009e dfdd      	RCALL _All_LED_Off
                 ; 0000 005B 
                 ; 0000 005C for ( i = 0; i < level; i++)
                +
00009f e000     +LDI R16 , LOW ( 0 )
0000a0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x1A:
                +
0000a1 1503     +CP R16 , R3
0000a2 0514     +CPC R17 , R4
                 	__CPWRR 16,17,3,4
0000a3 f508      	BRSH _0x1B
                 ; 0000 005D {
                 ; 0000 005E switch(Current_Level[i])
0000a4 d162      	RCALL SUBOPT_0x1
0000a5 d167      	RCALL SUBOPT_0x2
                 ; 0000 005F {
                 ; 0000 0060 case 0:
0000a6 9730      	SBIW R30,0
0000a7 f419      	BRNE _0x1F
                 ; 0000 0061 LED1=1;
0000a8 d16a      	RCALL SUBOPT_0x3
                 ; 0000 0062 delay_ms(Sequence_Step_Delay);
                 ; 0000 0063 LED1=0;
0000a9 982c      	CBI  0x5,4
                 ; 0000 0064 delay_ms(200);
0000aa c014      	RJMP _0x72
                 ; 0000 0065 break;
                 ; 0000 0066 case 1:
                 _0x1F:
0000ab 30e1      	CPI  R30,LOW(0x1)
0000ac e0a0      	LDI  R26,HIGH(0x1)
0000ad 07fa      	CPC  R31,R26
0000ae f419      	BRNE _0x24
                 ; 0000 0067 LED2=1;
0000af d167      	RCALL SUBOPT_0x4
                 ; 0000 0068 delay_ms(Sequence_Step_Delay);
                 ; 0000 0069 LED2=0;
0000b0 982d      	CBI  0x5,5
                 ; 0000 006A delay_ms(200);
0000b1 c00d      	RJMP _0x72
                 ; 0000 006B break;
                 ; 0000 006C case 2:
                 _0x24:
0000b2 30e2      	CPI  R30,LOW(0x2)
0000b3 e0a0      	LDI  R26,HIGH(0x2)
0000b4 07fa      	CPC  R31,R26
0000b5 f419      	BRNE _0x29
                 ; 0000 006D LED3=1;
0000b6 d164      	RCALL SUBOPT_0x5
                 ; 0000 006E delay_ms(Sequence_Step_Delay);
                 ; 0000 006F LED3=0;
0000b7 982e      	CBI  0x5,6
                 ; 0000 0070 delay_ms(200);
0000b8 c006      	RJMP _0x72
                 ; 0000 0071 break;
                 ; 0000 0072 case 3:
                 _0x29:
0000b9 30e3      	CPI  R30,LOW(0x3)
0000ba e0a0      	LDI  R26,HIGH(0x3)
0000bb 07fa      	CPC  R31,R26
0000bc f429      	BRNE _0x1E
                 ; 0000 0073 LED4=1;
0000bd d161      	RCALL SUBOPT_0x6
                 ; 0000 0074 delay_ms(Sequence_Step_Delay);
                 ; 0000 0075 LED4=0;
0000be 982f      	CBI  0x5,7
                 ; 0000 0076 delay_ms(200);
                 _0x72:
0000bf eca8      	LDI  R26,LOW(200)
0000c0 e0b0      	LDI  R27,0
0000c1 d1ba      	RCALL _delay_ms
                 ; 0000 0077 break;
                 ; 0000 0078 }
                 _0x1E:
                 ; 0000 0079 
                 ; 0000 007A }
                +
0000c2 5f0f     +SUBI R16 , LOW ( - 1 )
0000c3 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000c4 cfdc      	RJMP _0x1A
                 _0x1B:
                 ; 0000 007B }
0000c5 c02d      	RJMP _0x2080002
                 ; .FEND
                 ;void right_Current_Level() {
                 ; 0000 007D void right_Current_Level() {
                 _right_Current_Level:
                 ; .FSTART _right_Current_Level
                 ; 0000 007E All_LED_Off();
0000c6 d15c      	RCALL SUBOPT_0x7
                 ; 0000 007F delay_ms(250);
                 ; 0000 0080 
                 ; 0000 0081 All_LED_On();
0000c7 dfb9      	RCALL _All_LED_On
                 ; 0000 0082 delay_ms(500);
0000c8 efa4      	LDI  R26,LOW(500)
0000c9 e0b1      	LDI  R27,HIGH(500)
0000ca d1b1      	RCALL _delay_ms
                 ; 0000 0083 
                 ; 0000 0084 All_LED_Off();
0000cb dfb0      	RCALL _All_LED_Off
                 ; 0000 0085 delay_ms(500);
0000cc efa4      	LDI  R26,LOW(500)
0000cd e0b1      	LDI  R27,HIGH(500)
0000ce d1ad      	RCALL _delay_ms
                 ; 0000 0086 
                 ; 0000 0087 if (level < MAX_LEVEL) {
0000cf e6e4      	LDI  R30,LOW(100)
0000d0 e0f0      	LDI  R31,HIGH(100)
0000d1 163e      	CP   R3,R30
0000d2 064f      	CPC  R4,R31
0000d3 f424      	BRGE _0x33
                 ; 0000 0088 level++;
0000d4 e0e1      	LDI  R30,LOW(1)
0000d5 e0f0      	LDI  R31,HIGH(1)
                +
0000d6 0e3e     +ADD R3 , R30
0000d7 1e4f     +ADC R4 , R31
                 	__ADDWRR 3,4,30,31
                 ; 0000 0089 }
                 ; 0000 008A Sequence_Step_Delay -= 50; //increases difficulty
                 _0x33:
                +
0000d8 2de5     +MOV R30 , R5
0000d9 2df6     +MOV R31 , R6
                 	__GETW1R 5,6
0000da 97f2      	SBIW R30,50
                +
0000db 2e5e     +MOV R5 , R30
0000dc 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 008B }
0000dd 9508      	RET
                 ; .FEND
                 ;void wrong_Current_Level()
                 ; 0000 008E {
                 _wrong_Current_Level:
                 ; .FSTART _wrong_Current_Level
                 ; 0000 008F unsigned int i;
                 ; 0000 0090 for ( i = 0; i < 3; i++)
0000de d123      	RCALL SUBOPT_0x0
                 ;	i -> R16,R17
                 _0x35:
                +
0000df 3003     +CPI R16 , LOW ( 3 )
0000e0 e0e0     +LDI R30 , HIGH ( 3 )
0000e1 071e     +CPC R17 , R30
                 	__CPWRN 16,17,3
0000e2 f440      	BRSH _0x36
                 ; 0000 0091 {
                 ; 0000 0092 All_LED_On();
0000e3 df9d      	RCALL _All_LED_On
                 ; 0000 0093 delay_ms(250);
0000e4 efaa      	LDI  R26,LOW(250)
0000e5 e0b0      	LDI  R27,0
0000e6 d195      	RCALL _delay_ms
                 ; 0000 0094 All_LED_Off();
0000e7 d13b      	RCALL SUBOPT_0x7
                 ; 0000 0095 delay_ms(250);
                 ; 0000 0096 }
                +
0000e8 5f0f     +SUBI R16 , LOW ( - 1 )
0000e9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000ea cff4      	RJMP _0x35
                 _0x36:
                 ; 0000 0097 
                 ; 0000 0098 level = 1;
0000eb e0e1      	LDI  R30,LOW(1)
0000ec e0f0      	LDI  R31,HIGH(1)
                +
0000ed 2e3e     +MOV R3 , R30
0000ee 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
                 ; 0000 0099 Sequence_Step_Delay = 1000;
0000ef eee8      	LDI  R30,LOW(1000)
0000f0 e0f3      	LDI  R31,HIGH(1000)
                +
0000f1 2e5e     +MOV R5 , R30
0000f2 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 009A }
                 _0x2080002:
0000f3 9109      	LD   R16,Y+
0000f4 9119      	LD   R17,Y+
0000f5 9508      	RET
                 ; .FEND
                 ;void get_Current_Level()
                 ; 0000 009D {
                 _get_Current_Level:
                 ; .FSTART _get_Current_Level
                 ; 0000 009E int flag = 0; //flag correct Current_Level
                 ; 0000 009F unsigned int i;
                 ; 0000 00A0 
                 ; 0000 00A1 for (i = 0; i < level; i++)
0000f6 d14d      	RCALL __SAVELOCR4
                 ;	flag -> R16,R17
                 ;	i -> R18,R19
                +
0000f7 e000     +LDI R16 , LOW ( 0 )
0000f8 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0000f9 e020     +LDI R18 , LOW ( 0 )
0000fa e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x38:
                +
0000fb 1523     +CP R18 , R3
0000fc 0534     +CPC R19 , R4
                 	__CPWRR 18,19,3,4
0000fd f008      	BRLO PC+2
0000fe c041      	RJMP _0x39
                 ; 0000 00A2 {
                 ; 0000 00A3 flag = 0;
                +
0000ff e000     +LDI R16 , LOW ( 0 )
000100 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 00A4 
                 ; 0000 00A5 while (flag == 0)
                 _0x3A:
000101 2e00      	MOV  R0,R16
000102 2a01      	OR   R0,R17
000103 f5c9      	BRNE _0x3C
                 ; 0000 00A6 {
                 ; 0000 00A7 
                 ; 0000 00A8 if (!SW1)
000104 9918      	SBIC 0x3,0
000105 c00c      	RJMP _0x3D
                 ; 0000 00A9 {
                 ; 0000 00AA LED1=1;
000106 d10c      	RCALL SUBOPT_0x3
                 ; 0000 00AB delay_ms(Sequence_Step_Delay);
                 ; 0000 00AC Sequence_Input[i] = 0;
000107 d11f      	RCALL SUBOPT_0x8
000108 e0e0      	LDI  R30,LOW(0)
000109 e0f0      	LDI  R31,HIGH(0)
00010a d124      	RCALL SUBOPT_0x9
                 ; 0000 00AD flag = 1;
                 ; 0000 00AE delay_ms(200);
                 ; 0000 00AF 
                 ; 0000 00B0 if (Sequence_Input[i] != Current_Level[i]) {
00010b d12b      	RCALL SUBOPT_0xA
00010c 15e0      	CP   R30,R0
00010d 05f1      	CPC  R31,R1
00010e f011      	BREQ _0x40
                 ; 0000 00B1 wrong_Current_Level();
00010f dfce      	RCALL _wrong_Current_Level
                 ; 0000 00B2 return;
000110 c048      	RJMP _0x2080001
                 ; 0000 00B3 }
                 ; 0000 00B4 LED1=0;
                 _0x40:
000111 982c      	CBI  0x5,4
                 ; 0000 00B5 }
                 ; 0000 00B6 
                 ; 0000 00B7 if (!SW2)
                 _0x3D:
000112 9919      	SBIC 0x3,1
000113 c00c      	RJMP _0x43
                 ; 0000 00B8 {
                 ; 0000 00B9 LED2=1;
000114 d102      	RCALL SUBOPT_0x4
                 ; 0000 00BA delay_ms(Sequence_Step_Delay);
                 ; 0000 00BB Sequence_Input[i] = 1;
000115 d111      	RCALL SUBOPT_0x8
000116 e0e1      	LDI  R30,LOW(1)
000117 e0f0      	LDI  R31,HIGH(1)
000118 d116      	RCALL SUBOPT_0x9
                 ; 0000 00BC flag = 1;
                 ; 0000 00BD delay_ms(200);
                 ; 0000 00BE 
                 ; 0000 00BF if (Sequence_Input[i] != Current_Level[i]) {
000119 d11d      	RCALL SUBOPT_0xA
00011a 15e0      	CP   R30,R0
00011b 05f1      	CPC  R31,R1
00011c f011      	BREQ _0x46
                 ; 0000 00C0 wrong_Current_Level();
00011d dfc0      	RCALL _wrong_Current_Level
                 ; 0000 00C1 return;
00011e c03a      	RJMP _0x2080001
                 ; 0000 00C2 }
                 ; 0000 00C3 LED2=0;
                 _0x46:
00011f 982d      	CBI  0x5,5
                 ; 0000 00C4 }
                 ; 0000 00C5 
                 ; 0000 00C6 if (!SW3)
                 _0x43:
000120 991a      	SBIC 0x3,2
000121 c00c      	RJMP _0x49
                 ; 0000 00C7 {
                 ; 0000 00C8 LED3=1;
000122 d0f8      	RCALL SUBOPT_0x5
                 ; 0000 00C9 delay_ms(Sequence_Step_Delay);
                 ; 0000 00CA Sequence_Input[i] = 2;
000123 d103      	RCALL SUBOPT_0x8
000124 e0e2      	LDI  R30,LOW(2)
000125 e0f0      	LDI  R31,HIGH(2)
000126 d108      	RCALL SUBOPT_0x9
                 ; 0000 00CB flag = 1;
                 ; 0000 00CC delay_ms(200);
                 ; 0000 00CD 
                 ; 0000 00CE if (Sequence_Input[i] != Current_Level[i]) {
000127 d10f      	RCALL SUBOPT_0xA
000128 15e0      	CP   R30,R0
000129 05f1      	CPC  R31,R1
00012a f011      	BREQ _0x4C
                 ; 0000 00CF wrong_Current_Level();
00012b dfb2      	RCALL _wrong_Current_Level
                 ; 0000 00D0 return;
00012c c02c      	RJMP _0x2080001
                 ; 0000 00D1 }
                 ; 0000 00D2 LED3=0;
                 _0x4C:
00012d 982e      	CBI  0x5,6
                 ; 0000 00D3 }
                 ; 0000 00D4 
                 ; 0000 00D5 if (!SW4) {
                 _0x49:
00012e 991b      	SBIC 0x3,3
00012f c00c      	RJMP _0x4F
                 ; 0000 00D6 LED4=1;
000130 d0ee      	RCALL SUBOPT_0x6
                 ; 0000 00D7 delay_ms(Sequence_Step_Delay);
                 ; 0000 00D8 Sequence_Input[i] = 3;
000131 d0f5      	RCALL SUBOPT_0x8
000132 e0e3      	LDI  R30,LOW(3)
000133 e0f0      	LDI  R31,HIGH(3)
000134 d0fa      	RCALL SUBOPT_0x9
                 ; 0000 00D9 flag = 1;
                 ; 0000 00DA delay_ms(200);
                 ; 0000 00DB 
                 ; 0000 00DC if (Sequence_Input[i] != Current_Level[i]) {
000135 d101      	RCALL SUBOPT_0xA
000136 15e0      	CP   R30,R0
000137 05f1      	CPC  R31,R1
000138 f011      	BREQ _0x52
                 ; 0000 00DD wrong_Current_Level();
000139 dfa4      	RCALL _wrong_Current_Level
                 ; 0000 00DE return;
00013a c01e      	RJMP _0x2080001
                 ; 0000 00DF }
                 ; 0000 00E0 LED4=0;
                 _0x52:
00013b 982f      	CBI  0x5,7
                 ; 0000 00E1 }
                 ; 0000 00E2 }
                 _0x4F:
00013c cfc4      	RJMP _0x3A
                 _0x3C:
                 ; 0000 00E3 }
                +
00013d 5f2f     +SUBI R18 , LOW ( - 1 )
00013e 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00013f cfbb      	RJMP _0x38
                 _0x39:
                 ; 0000 00E4 if(i==MAX_LEVEL)
000140 e6e4      	LDI  R30,LOW(100)
000141 e0f0      	LDI  R31,HIGH(100)
000142 17e2      	CP   R30,R18
000143 07f3      	CPC  R31,R19
000144 f499      	BRNE _0x55
                 ; 0000 00E5 {
                 ; 0000 00E6 for(i=0;i<10;i++)
                +
000145 e020     +LDI R18 , LOW ( 0 )
000146 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x57:
                +
000147 302a     +CPI R18 , LOW ( 10 )
000148 e0e0     +LDI R30 , HIGH ( 10 )
000149 073e     +CPC R19 , R30
                 	__CPWRN 18,19,10
00014a f458      	BRSH _0x58
                 ; 0000 00E7 {
                 ; 0000 00E8 All_LED_Off();
00014b df30      	RCALL _All_LED_Off
                 ; 0000 00E9 delay_ms(100);
00014c e6a4      	LDI  R26,LOW(100)
00014d e0b0      	LDI  R27,0
00014e d12d      	RCALL _delay_ms
                 ; 0000 00EA All_LED_On();
00014f df31      	RCALL _All_LED_On
                 ; 0000 00EB delay_ms(100);
000150 e6a4      	LDI  R26,LOW(100)
000151 e0b0      	LDI  R27,0
000152 d129      	RCALL _delay_ms
                 ; 0000 00EC }
                +
000153 5f2f     +SUBI R18 , LOW ( - 1 )
000154 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000155 cff1      	RJMP _0x57
                 _0x58:
                 ; 0000 00ED wrong_Current_Level();
000156 df87      	RCALL _wrong_Current_Level
                 ; 0000 00EE 
                 ; 0000 00EF }
                 ; 0000 00F0 else
000157 c001      	RJMP _0x59
                 _0x55:
                 ; 0000 00F1 right_Current_Level();
000158 df6d      	RCALL _right_Current_Level
                 ; 0000 00F2 }
                 _0x59:
                 _0x2080001:
000159 d0ef      	RCALL __LOADLOCR4
00015a 9624      	ADIW R28,4
00015b 9508      	RET
                 ; .FEND
                 ;void Led_Flash()
                 ; 0000 00F5 {
                 _Led_Flash:
                 ; .FSTART _Led_Flash
                 ; 0000 00F6 LED1=1;
00015c 9a2c      	SBI  0x5,4
                 ; 0000 00F7 delay_ms(100);
00015d e6a4      	LDI  R26,LOW(100)
00015e e0b0      	LDI  R27,0
00015f d11c      	RCALL _delay_ms
                 ; 0000 00F8 LED1=0;
000160 982c      	CBI  0x5,4
                 ; 0000 00F9 delay_ms(100);
000161 e6a4      	LDI  R26,LOW(100)
000162 e0b0      	LDI  R27,0
000163 d118      	RCALL _delay_ms
                 ; 0000 00FA 
                 ; 0000 00FB LED2=1;
000164 9a2d      	SBI  0x5,5
                 ; 0000 00FC delay_ms(100);
000165 e6a4      	LDI  R26,LOW(100)
000166 e0b0      	LDI  R27,0
000167 d114      	RCALL _delay_ms
                 ; 0000 00FD LED2=0;
000168 982d      	CBI  0x5,5
                 ; 0000 00FE delay_ms(100);
000169 e6a4      	LDI  R26,LOW(100)
00016a e0b0      	LDI  R27,0
00016b d110      	RCALL _delay_ms
                 ; 0000 00FF 
                 ; 0000 0100 LED3=1;
00016c 9a2e      	SBI  0x5,6
                 ; 0000 0101 delay_ms(100);
00016d e6a4      	LDI  R26,LOW(100)
00016e e0b0      	LDI  R27,0
00016f d10c      	RCALL _delay_ms
                 ; 0000 0102 LED3=0;
000170 982e      	CBI  0x5,6
                 ; 0000 0103 delay_ms(100);
000171 e6a4      	LDI  R26,LOW(100)
000172 e0b0      	LDI  R27,0
000173 d108      	RCALL _delay_ms
                 ; 0000 0104 
                 ; 0000 0105 LED4=1;
000174 9a2f      	SBI  0x5,7
                 ; 0000 0106 delay_ms(100);
000175 e6a4      	LDI  R26,LOW(100)
000176 e0b0      	LDI  R27,0
000177 d104      	RCALL _delay_ms
                 ; 0000 0107 LED4=0;
000178 982f      	CBI  0x5,7
                 ; 0000 0108 delay_ms(100);
000179 e6a4      	LDI  R26,LOW(100)
00017a e0b0      	LDI  R27,0
00017b d100      	RCALL _delay_ms
                 ; 0000 0109 }
00017c 9508      	RET
                 ; .FEND
                 ;void main(void)
                 ; 0000 010E {
                 _main:
                 ; .FSTART _main
                 ; 0000 010F // Declare your local variables here
                 ; 0000 0110 // Crystal Oscillator division factor: 1
                 ; 0000 0111 #pragma optsize-
                 ; 0000 0112 CLKPR=(1<<CLKPCE);
00017d e8e0      	LDI  R30,LOW(128)
00017e 93e0 0061 	STS  97,R30
                 ; 0000 0113 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
000180 e0e0      	LDI  R30,LOW(0)
000181 93e0 0061 	STS  97,R30
                 ; 0000 0114 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0115 #pragma optsize+
                 ; 0000 0116 #endif
                 ; 0000 0117 
                 ; 0000 0118 // Input/Output Ports initialization
                 ; 0000 0119 // Port A initialization
                 ; 0000 011A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 011B DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000183 b9e1      	OUT  0x1,R30
                 ; 0000 011C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 011D PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000184 b9e2      	OUT  0x2,R30
                 ; 0000 011E 
                 ; 0000 011F // Port B initialization
                 ; 0000 0120 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0121 DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000185 efe0      	LDI  R30,LOW(240)
000186 b9e4      	OUT  0x4,R30
                 ; 0000 0122 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=P Bit2=P Bit1=P Bit0=P
                 ; 0000 0123 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
000187 e0ef      	LDI  R30,LOW(15)
000188 b9e5      	OUT  0x5,R30
                 ; 0000 0124 
                 ; 0000 0125 // Port C initialization
                 ; 0000 0126 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0127 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000189 e0e0      	LDI  R30,LOW(0)
00018a b9e7      	OUT  0x7,R30
                 ; 0000 0128 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0129 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00018b b9e8      	OUT  0x8,R30
                 ; 0000 012A 
                 ; 0000 012B // Port D initialization
                 ; 0000 012C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 012D DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00018c b9ea      	OUT  0xA,R30
                 ; 0000 012E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 012F PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00018d b9eb      	OUT  0xB,R30
                 ; 0000 0130 
                 ; 0000 0131 // Timer/Counter 0 initialization
                 ; 0000 0132 // Clock source: System Clock
                 ; 0000 0133 // Clock value: Timer 0 Stopped
                 ; 0000 0134 // Mode: Normal top=0xFF
                 ; 0000 0135 // OC0A output: Disconnected
                 ; 0000 0136 // OC0B output: Disconnected
                 ; 0000 0137 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
00018e bde4      	OUT  0x24,R30
                 ; 0000 0138 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00018f bde5      	OUT  0x25,R30
                 ; 0000 0139 TCNT0=0x00;
000190 bde6      	OUT  0x26,R30
                 ; 0000 013A OCR0A=0x00;
000191 bde7      	OUT  0x27,R30
                 ; 0000 013B OCR0B=0x00;
000192 bde8      	OUT  0x28,R30
                 ; 0000 013C 
                 ; 0000 013D // Timer/Counter 1 initialization
                 ; 0000 013E // Clock source: System Clock
                 ; 0000 013F // Clock value: Timer1 Stopped
                 ; 0000 0140 // Mode: Normal top=0xFFFF
                 ; 0000 0141 // OC1A output: Disconnected
                 ; 0000 0142 // OC1B output: Disconnected
                 ; 0000 0143 // Noise Canceler: Off
                 ; 0000 0144 // Input Capture on Falling Edge
                 ; 0000 0145 // Timer1 Overflow Interrupt: Off
                 ; 0000 0146 // Input Capture Interrupt: Off
                 ; 0000 0147 // Compare A Match Interrupt: Off
                 ; 0000 0148 // Compare B Match Interrupt: Off
                 ; 0000 0149 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000193 93e0 0080 	STS  128,R30
                 ; 0000 014A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000195 93e0 0081 	STS  129,R30
                 ; 0000 014B TCNT1H=0x00;
000197 93e0 0085 	STS  133,R30
                 ; 0000 014C TCNT1L=0x00;
000199 93e0 0084 	STS  132,R30
                 ; 0000 014D ICR1H=0x00;
00019b 93e0 0087 	STS  135,R30
                 ; 0000 014E ICR1L=0x00;
00019d 93e0 0086 	STS  134,R30
                 ; 0000 014F OCR1AH=0x00;
00019f 93e0 0089 	STS  137,R30
                 ; 0000 0150 OCR1AL=0x00;
0001a1 93e0 0088 	STS  136,R30
                 ; 0000 0151 OCR1BH=0x00;
0001a3 93e0 008b 	STS  139,R30
                 ; 0000 0152 OCR1BL=0x00;
0001a5 93e0 008a 	STS  138,R30
                 ; 0000 0153 
                 ; 0000 0154 // Timer/Counter 2 initialization
                 ; 0000 0155 // Clock source: System Clock
                 ; 0000 0156 // Clock value: Timer2 Stopped
                 ; 0000 0157 // Mode: Normal top=0xFF
                 ; 0000 0158 // OC2A output: Disconnected
                 ; 0000 0159 // OC2B output: Disconnected
                 ; 0000 015A ASSR=(0<<EXCLK) | (0<<AS2);
0001a7 93e0 00b6 	STS  182,R30
                 ; 0000 015B TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
0001a9 93e0 00b0 	STS  176,R30
                 ; 0000 015C TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0001ab 93e0 00b1 	STS  177,R30
                 ; 0000 015D TCNT2=0x00;
0001ad 93e0 00b2 	STS  178,R30
                 ; 0000 015E OCR2A=0x00;
0001af 93e0 00b3 	STS  179,R30
                 ; 0000 015F OCR2B=0x00;
0001b1 93e0 00b4 	STS  180,R30
                 ; 0000 0160 
                 ; 0000 0161 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0162 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
0001b3 93e0 006e 	STS  110,R30
                 ; 0000 0163 
                 ; 0000 0164 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0165 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
0001b5 93e0 006f 	STS  111,R30
                 ; 0000 0166 
                 ; 0000 0167 // Timer/Counter 2 Interrupt(s) initialization
                 ; 0000 0168 TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
0001b7 93e0 0070 	STS  112,R30
                 ; 0000 0169 
                 ; 0000 016A // External Interrupt(s) initialization
                 ; 0000 016B // INT0: Off
                 ; 0000 016C // INT1: Off
                 ; 0000 016D // INT2: Off
                 ; 0000 016E // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 016F // Interrupt on any change on pins PCINT8-15: Off
                 ; 0000 0170 // Interrupt on any change on pins PCINT16-23: Off
                 ; 0000 0171 // Interrupt on any change on pins PCINT24-31: Off
                 ; 0000 0172 EICRA=(0<<ISC21) | (0<<ISC20) | (0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0001b9 93e0 0069 	STS  105,R30
                 ; 0000 0173 EIMSK=(0<<INT2) | (0<<INT1) | (0<<INT0);
0001bb bbed      	OUT  0x1D,R30
                 ; 0000 0174 PCICR=(0<<PCIE3) | (0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
0001bc 93e0 0068 	STS  104,R30
                 ; 0000 0175 
                 ; 0000 0176 // USART0 initialization
                 ; 0000 0177 // USART0 disabled
                 ; 0000 0178 UCSR0B=(0<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (0<<RXEN0) | (0<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
0001be 93e0 00c1 	STS  193,R30
                 ; 0000 0179 
                 ; 0000 017A // USART1 initialization
                 ; 0000 017B // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 017C // USART1 Receiver: Off
                 ; 0000 017D // USART1 Transmitter: On
                 ; 0000 017E // USART1 Mode: Asynchronous
                 ; 0000 017F // USART1 Baud Rate: 9600
                 ; 0000 0180 UCSR1A=(0<<RXC1) | (0<<TXC1) | (0<<UDRE1) | (0<<FE1) | (0<<DOR1) | (0<<UPE1) | (0<<U2X1) | (0<<MPCM1);
0001c0 93e0 00c8 	STS  200,R30
                 ; 0000 0181 UCSR1B=(0<<RXCIE1) | (0<<TXCIE1) | (0<<UDRIE1) | (0<<RXEN1) | (1<<TXEN1) | (0<<UCSZ12) | (0<<RXB81) | (0<<TXB81);
0001c2 e0e8      	LDI  R30,LOW(8)
0001c3 93e0 00c9 	STS  201,R30
                 ; 0000 0182 UCSR1C=(0<<UMSEL11) | (0<<UMSEL10) | (0<<UPM11) | (0<<UPM10) | (0<<USBS1) | (1<<UCSZ11) | (1<<UCSZ10) | (0<<UCPOL1);
0001c5 e0e6      	LDI  R30,LOW(6)
0001c6 93e0 00ca 	STS  202,R30
                 ; 0000 0183 UBRR1H=0x00;
0001c8 e0e0      	LDI  R30,LOW(0)
0001c9 93e0 00cd 	STS  205,R30
                 ; 0000 0184 UBRR1L=0x81;
0001cb e8e1      	LDI  R30,LOW(129)
0001cc 93e0 00cc 	STS  204,R30
                 ; 0000 0185 
                 ; 0000 0186 // Analog Comparator initialization
                 ; 0000 0187 // Analog Comparator: Off
                 ; 0000 0188 // The Analog Comparator's positive input is
                 ; 0000 0189 // connected to the AIN0 pin
                 ; 0000 018A // The Analog Comparator's negative input is
                 ; 0000 018B // connected to the AIN1 pin
                 ; 0000 018C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0001ce e8e0      	LDI  R30,LOW(128)
0001cf bfe0      	OUT  0x30,R30
                 ; 0000 018D ADCSRB=(0<<ACME);
0001d0 e0e0      	LDI  R30,LOW(0)
0001d1 93e0 007b 	STS  123,R30
                 ; 0000 018E // Digital input buffer on AIN0: On
                 ; 0000 018F // Digital input buffer on AIN1: On
                 ; 0000 0190 DIDR1=(0<<AIN0D) | (0<<AIN1D);
0001d3 93e0 007f 	STS  127,R30
                 ; 0000 0191 
                 ; 0000 0192 // ADC initialization
                 ; 0000 0193 // ADC disabled
                 ; 0000 0194 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0001d5 93e0 007a 	STS  122,R30
                 ; 0000 0195 
                 ; 0000 0196 // SPI initialization
                 ; 0000 0197 // SPI disabled
                 ; 0000 0198 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0001d7 bdec      	OUT  0x2C,R30
                 ; 0000 0199 
                 ; 0000 019A // TWI initialization
                 ; 0000 019B // TWI disabled
                 ; 0000 019C TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0001d8 93e0 00bc 	STS  188,R30
                 ; 0000 019D 
                 ; 0000 019E while (1)
                 _0x6A:
                 ; 0000 019F {
                 ; 0000 01A0 if (level == 1)
0001da d064      	RCALL SUBOPT_0xB
0001db f411      	BRNE _0x6D
                 ; 0000 01A1 {
                 ; 0000 01A2 generate_Current_Level();
0001dc dea9      	RCALL _generate_Current_Level
                 ; 0000 01A3 Led_Flash();
0001dd df7e      	RCALL _Led_Flash
                 ; 0000 01A4 }
                 ; 0000 01A5 
                 ; 0000 01A6 if ( (SW1==0) || (level != 1))
                 _0x6D:
0001de 9b18      	SBIS 0x3,0
0001df c002      	RJMP _0x6F
0001e0 d05e      	RCALL SUBOPT_0xB
0001e1 f011      	BREQ _0x6E
                 _0x6F:
                 ; 0000 01A7 {
                 ; 0000 01A8 show_Current_Level();
0001e2 deb9      	RCALL _show_Current_Level
                 ; 0000 01A9 get_Current_Level();
0001e3 df12      	RCALL _get_Current_Level
                 ; 0000 01AA }
                 ; 0000 01AB 
                 ; 0000 01AC }
                 _0x6E:
0001e4 cff5      	RJMP _0x6A
                 ; 0000 01AD 
                 ; 0000 01AE }
                 _0x71:
0001e5 cfff      	RJMP _0x71
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 _rand:
                 ; .FSTART _rand
0001e6 91e0 0390 	LDS  R30,__seed_G100
0001e8 91f0 0391 	LDS  R31,__seed_G100+1
0001ea 9160 0392 	LDS  R22,__seed_G100+2
0001ec 9170 0393 	LDS  R23,__seed_G100+3
                +
0001ee e6ad     +LDI R26 , LOW ( 0x41C64E6D )
0001ef e4be     +LDI R27 , HIGH ( 0x41C64E6D )
0001f0 ec86     +LDI R24 , BYTE3 ( 0x41C64E6D )
0001f1 e491     +LDI R25 , BYTE4 ( 0x41C64E6D )
                 	__GETD2N 0x41C64E6D
0001f2 d05f      	RCALL __MULD12U
                +
0001f3 59ee     +SUBI R30 , LOW ( - 30562 )
0001f4 48f8     +SBCI R31 , HIGH ( - 30562 )
0001f5 4f6f     +SBCI R22 , BYTE3 ( - 30562 )
0001f6 4f7f     +SBCI R23 , BYTE4 ( - 30562 )
                 	__ADDD1N 30562
0001f7 93e0 0390 	STS  __seed_G100,R30
0001f9 93f0 0391 	STS  __seed_G100+1,R31
0001fb 9360 0392 	STS  __seed_G100+2,R22
0001fd 9370 0393 	STS  __seed_G100+3,R23
0001ff 01fb      	movw r30,r22
000200 77ff      	andi r31,0x7F
000201 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _Current_Level:
000200           	.BYTE 0xC8
                 _Sequence_Input:
0002c8           	.BYTE 0xC8
                 __seed_G100:
000390           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000202 931a      	ST   -Y,R17
000203 930a      	ST   -Y,R16
                +
000204 e000     +LDI R16 , LOW ( 0 )
000205 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000206 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
000207 01f8      	MOVW R30,R16
000208 e0a0      	LDI  R26,LOW(_Current_Level)
000209 e0b2      	LDI  R27,HIGH(_Current_Level)
00020a 0fee      	LSL  R30
00020b 1fff      	ROL  R31
00020c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x2:
00020d 0fae      	ADD  R26,R30
00020e 1fbf      	ADC  R27,R31
                +
00020f 91ed     +LD R30 , X +
000210 91fc     +LD R31 , X
000211 9711     +SBIW R26 , 1
                 	__GETW1P
000212 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000213 9a2c      	SBI  0x5,4
                +
000214 2da5     +MOV R26 , R5
000215 2db6     +MOV R27 , R6
                 	__GETW2R 5,6
000216 c065      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000217 9a2d      	SBI  0x5,5
                +
000218 2da5     +MOV R26 , R5
000219 2db6     +MOV R27 , R6
                 	__GETW2R 5,6
00021a c061      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00021b 9a2e      	SBI  0x5,6
                +
00021c 2da5     +MOV R26 , R5
00021d 2db6     +MOV R27 , R6
                 	__GETW2R 5,6
00021e c05d      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00021f 9a2f      	SBI  0x5,7
                +
000220 2da5     +MOV R26 , R5
000221 2db6     +MOV R27 , R6
                 	__GETW2R 5,6
000222 c059      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000223 de58      	RCALL _All_LED_Off
000224 efaa      	LDI  R26,LOW(250)
000225 e0b0      	LDI  R27,0
000226 c055      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:40 WORDS
                 SUBOPT_0x8:
000227 01f9      	MOVW R30,R18
000228 eca8      	LDI  R26,LOW(_Sequence_Input)
000229 e0b2      	LDI  R27,HIGH(_Sequence_Input)
00022a 0fee      	LSL  R30
00022b 1fff      	ROL  R31
00022c 0fae      	ADD  R26,R30
00022d 1fbf      	ADC  R27,R31
00022e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x9:
00022f 93ed      	ST   X+,R30
000230 93fc      	ST   X,R31
                +
000231 e001     +LDI R16 , LOW ( 1 )
000232 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
000233 eca8      	LDI  R26,LOW(200)
000234 e0b0      	LDI  R27,0
000235 d046      	RCALL _delay_ms
000236 cff0      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0xA:
000237 900d      	LD   R0,X+
000238 901c      	LD   R1,X
000239 01f9      	MOVW R30,R18
00023a e0a0      	LDI  R26,LOW(_Current_Level)
00023b e0b2      	LDI  R27,HIGH(_Current_Level)
00023c 0fee      	LSL  R30
00023d 1fff      	ROL  R31
00023e cfce      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00023f e0e1      	LDI  R30,LOW(1)
000240 e0f0      	LDI  R31,HIGH(1)
000241 15e3      	CP   R30,R3
000242 05f4      	CPC  R31,R4
000243 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
000244 933a      	ST   -Y,R19
                 __SAVELOCR3:
000245 932a      	ST   -Y,R18
                 __SAVELOCR2:
000246 931a      	ST   -Y,R17
000247 930a      	ST   -Y,R16
000248 9508      	RET
                 
                 __LOADLOCR4:
000249 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00024a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00024b 8119      	LDD  R17,Y+1
00024c 8108      	LD   R16,Y
00024d 9508      	RET
                 
                 __ANEGW1:
00024e 95f1      	NEG  R31
00024f 95e1      	NEG  R30
000250 40f0      	SBCI R31,0
000251 9508      	RET
                 
                 __MULD12U:
000252 9f7a      	MUL  R23,R26
000253 2d70      	MOV  R23,R0
000254 9f6b      	MUL  R22,R27
000255 0d70      	ADD  R23,R0
000256 9ff8      	MUL  R31,R24
000257 0d70      	ADD  R23,R0
000258 9fe9      	MUL  R30,R25
000259 0d70      	ADD  R23,R0
00025a 9f6a      	MUL  R22,R26
00025b 2d60      	MOV  R22,R0
00025c 0d71      	ADD  R23,R1
00025d 9ffb      	MUL  R31,R27
00025e 0d60      	ADD  R22,R0
00025f 1d71      	ADC  R23,R1
000260 9fe8      	MUL  R30,R24
000261 0d60      	ADD  R22,R0
000262 1d71      	ADC  R23,R1
000263 2788      	CLR  R24
000264 9ffa      	MUL  R31,R26
000265 2df0      	MOV  R31,R0
000266 0d61      	ADD  R22,R1
000267 1f78      	ADC  R23,R24
000268 9feb      	MUL  R30,R27
000269 0df0      	ADD  R31,R0
00026a 1d61      	ADC  R22,R1
00026b 1f78      	ADC  R23,R24
00026c 9fea      	MUL  R30,R26
00026d 2de0      	MOV  R30,R0
00026e 0df1      	ADD  R31,R1
00026f 1f68      	ADC  R22,R24
000270 1f78      	ADC  R23,R24
000271 9508      	RET
                 
                 __MANDW12:
000272 94e8      	CLT
000273 fff7      	SBRS R31,7
000274 c002      	RJMP __MANDW121
000275 dfd8      	RCALL __ANEGW1
000276 9468      	SET
                 __MANDW121:
000277 23ea      	AND  R30,R26
000278 23fb      	AND  R31,R27
000279 f40e      	BRTC __MANDW122
00027a dfd3      	RCALL __ANEGW1
                 __MANDW122:
00027b 9508      	RET
                 
                 _delay_ms:
00027c 9610      	adiw r26,0
00027d f039      	breq __delay_ms1
                 __delay_ms0:
00027e 95a8      	wdr
                +
00027f e888     +LDI R24 , LOW ( 0x1388 )
000280 e193     +LDI R25 , HIGH ( 0x1388 )
                +__DELAY_USW_LOOP :
000281 9701     +SBIW R24 , 1
000282 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x1388
000283 9711      	sbiw r26,1
000284 f7c9      	brne __delay_ms0
                 __delay_ms1:
000285 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega164A register use summary:
r0 :  21 r1 :  12 r2 :   0 r3 :   6 r4 :   6 r5 :   7 r6 :   7 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  18 r17:  17 r18:  11 r19:   9 r20:   0 r21:   0 r22:  14 r23:  14 
r24:  17 r25:   5 r26:  46 r27:  36 r28:   2 r29:   1 r30: 132 r31:  52 
x  :  11 y  :  14 z  :   7 
Registers used: 23 out of 35 (65.7%)

ATmega164A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  11 add   :  13 
adiw  :   2 and   :   2 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   7 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   4 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  16 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 
cp    :   9 cpc   :  15 cpi   :   6 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   0 jmp   :  32 ld    :   7 ldd   :   3 ldi   : 111 
lds   :   4 lpm   :   7 lsl   :   3 lsr   :   0 mov   :  21 movw  :   7 
mul   :  10 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   0 out   :  22 pop   :   2 push  :   2 rcall :  68 ret   :  18 
reti  :   0 rjmp  :  33 rol   :   3 ror   :   0 sbc   :   0 sbci  :   9 
sbi   :  12 sbic  :   4 sbis  :   1 sbiw  :   8 sbr   :   0 sbrc  :   0 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  15 std   :   0 sts   :  37 sub   :   0 subi  :   6 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 49 out of 116 (42.2%)

ATmega164A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00050c   1262     30   1292   16384   7.9%
[.dseg] 0x000100 0x000394      0    404    404    1024  39.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 6 warnings
